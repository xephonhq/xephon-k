package mem

import "sync"

{{ range .}}
// {{.Name}}Ring is a simple cache without compression
type {{.Name}}Ring struct {
	numPartitions uint64
	// TODO: benchmark performance of using pointer and struct https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/
	partitions []*{{.Name}}Partition
}

// TODO: default value for n?
func New{{.Name}}Ring(n int) *{{.Name}}Ring {
	r := &{{.Name}}Ring{
		numPartitions: uint64(n),
		partitions:    make([]*{{.Name}}Partition, n),
	}
	for i := 0; i < n; i++ {
		r.partitions[i] = &{{.Name}}Partition{
			store: make(map[uint64]*{{.Name}}Store),
		}
	}
	return r
}

func (r *{{.Name}}Ring) getPartition(hash uint64) *{{.Name}}Partition {
	return r.partitions[int(hash%r.numPartitions)]
}

type {{.Name}}Partition struct {
	mu    sync.RWMutex
	store map[uint64]*{{.Name}}Store
}

type {{.Name}}Store struct {
	// TODO: metrics tags
	mu     sync.RWMutex
	times  []int64
	values []{{.Type}}
	size   int
}

func New{{.Name}}Store(len int) *{{.Name}}Store {
	return &{{.Name}}Store{
		times:  make([]int64, 0, len),
		values: make([]{{.Type}}, 0, len),
	}
}

func (p *{{.Name}}Partition) WritePoints(hash uint64, times []int64, values []{{.Type}}) {
	p.mu.RLock()
	s := p.store[hash]
	if s != nil {
		s.mu.Lock()
		p.mu.RUnlock()
		s.size += len(times)
		s.times = append(s.times, times...)
		s.values = append(s.values, values...)
		s.mu.Unlock()
		return
	}
	p.mu.RUnlock()
	p.mu.Lock()
	s = New{{.Name}}Store(len(times))
	s.size += len(times)
	s.times = append(s.times, times...)
	s.values = append(s.values, values...)
	p.store[hash] = s
	p.mu.Unlock()
	return
}
{{ end }}